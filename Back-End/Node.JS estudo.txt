Node.JS estudo 

----Endpoints----
Get => puxa algum dado, geralmente usado em consultas
Post => cria os dados, geralmente usado no create das tabelas
Put => atualiza os dados
Delete => deleta os dados

----comandos de inicialização----
yarn init => inicia o yarn caso o node ja esteja instalado na máquina
yarn add => comando usado pra instalar dependências e bibliotecas que serão utilizadas
yarn tsc --init => adiciona o arquivo "tsconfig.json"

----comandos de compilação----
yarn tsc => cria uma versão em javaScript dos arquivos em typescript


----alterações no "tsconfig.json"----
rootdir => vai informar ao compilador aonde está o arquivo que é pra ser compilado evitando compilação de arquivos errados
outdir => vai informar ao compilador em qual pasta ele deve criar os arquivos compilados


----bibliotecas utilizadas----
express => usado para fazer api e  servidores http com rotas
status-codes => usado para melhorar o entendimento do código configurando qual código a chamada vai devolver ex:401, 200, 404.
dotenv => inicializa as variáveis ambiente do env no projeto

----configuração do ambiente----
arquivo .env => arquivo onde faremos a configuração básica do servidor 
port => define a porta usada
Node_env => define o ambiente em que estamos trabalhando no momento


----boas praticas----
deixar o arquivo ".env" no gitignore e versionar um arquivo contendo os exemplos das variáveis que estão no arquivo ".env" original, mas sem os valores que estão sendo usados. Isso evita que qualquer pessoa tem acesso a dados importantes e mantem o exemplo das variáveis que o usuário deve configurar.


----resumos----
./build => é a pasta aonde estarão os arquivos que vão ser efetivamente lidos pelo node na hora da produção, os arquivos desenvolvidos em typescript irão passar pelo compilador e será gerado arquivos em javaScript, esses arquivos ficarão na pasta build.

tsconfig.json => arquivo onde estarão as configurações do typescript, a principio a maioria estarão comentadas e pra fazer alterações devemos apenas tirar o comando de comentar e adicionar a configuração necessária.

.env => fazer as configurações de vaiáveis ambiente necessárias para o funcionamento do código como por exemplo, a porta em que o servidor vai rodar, a string de conexão com o banco de dados e o ambiente em que estaremos trabalhando entre outras.

.env.example => a versão sem os dados das variáveis ambiente para o funcionamento do código, esse arquivo serve pra ser versionado junto com o código para manter o exemplo das variáveis que devem ser configuradas sem prejudicar a segurança do projeto original.

middlewares => local onde é feito um tratamento intermediário nos dados antes de passar pela controller.
services => local onde é feito o tratamento de dados externos como a comunicação com uma api.

./src/server => pasta aonde vai ficar o arquivo das configurações do servidor do código.
./src/server/routes => pasta onde vai ficar os endpoints usados e o tratamento das informações que chegam e saem por esses endpoints.
./src/server/shared => pasta onde fica o conteúdo que vai ser usado em todo o código como por exemplo services e middlewares.


----estudar posteriormente----
zod => biblioteca alternativa ao yup e mais atual.

----fazer depois----
incluir as traduções dos erros do yup no código. 
   
 